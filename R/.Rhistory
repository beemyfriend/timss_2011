trial <- toJSON()
trial <- toJSON(list(c(us_network, chile_us_nodes)))
trial
write(trial, 'trial')
trial <- toJSON(list(c('hi', trial)))
trial
require(rjson)
?rjson
x <- list( alpha = 1:5, beta = "Bravo",
gamma = list(a=1:3, b=NULL),
delta = c(TRUE, FALSE) )
json <- toJSON( x )
json
x <- list( alpha = 1:5, beta = "Bravo",
gamma = list(a=1:3, b=NULL),
delta = c(TRUE, FALSE) )
json <- toJSON( nodes = chile_us_nodes, links = chile_network )
x <- list( alpha = 1:5, beta = "Bravo",
gamma = list(a=1:3, b=NULL),
delta = c(TRUE, FALSE) )
json <- toJSON( list(nodes = chile_us_nodes, links = chile_network ))
json
toJSON(chile_us_nodes)
detach(package:rjson)
toJSON(chile_us_nodes)
toJSON(c(chile_us_nodes, us_network)
)
chile_us_links <- chile_us_nodes %>%
filter(country == 'Chile') %>%
mutate(to = str_replace_all(id, 'chl', 'usa')) %>%
rename(from = id) %>%
select(from, to)
chile_us_links
chile_us_nodes
chile_us_links_d3 <- chile_us_nodes %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.$question_rank[1]}) %>%
unlist()) %>%
mutate(x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.$question_rank[1]}) %>%
unlist())
chile_us_links_d3 <- chile_us_nodes %>%
filter(question != 'M032331') %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.$question_rank[1]}) %>%
unlist()) %>%
mutate(x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.$question_rank[1]}) %>%
unlist())
chile_us_links_d3
chile_us_links_d3$data[[1]]
chile_us_links_d3$data[[1]] %>% .$question_rank
chile_us_links_d3 <- chile_us_nodes %>%
filter(question != 'M032331') %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.$question_rank}) %>%
unlist()) %>%
mutate(x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.$question_rank}) %>%
unlist())
chile_us_links_d3
chile_us_links_d3 <- chile_us_nodes %>%
filter(question != 'M032331') %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.$question_rank}) %>%
unlist()) %>%
mutate(x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.$question_rank}) %>%
unlist()) %>%
select(-data)
chile_us_links_d3
trial <- toJSON(chile_us_links_d3)
trial
write(trial, 'timss_links.json')
require(tidyverse)
require(stringr)
require(foreign)
require(haven)
chile_achievement_11 <- read_sas('timss/sas_timss11/bsachlm5.sas7bdat')
us_achievement_11 <- read_spss('D://TIMSS/spss_11_chileus/TIMSS/Grade 08/Y2011/Data/SPSS/bsausam5.sav')
achievement_codebook_11 <- read_tsv('timss/sas_timss11/codebooks/bsatmsm5.csv') %>%
select(FIELD_NAME, FIELD_LABL, MEAS_CLASS, COMMENT1) %>%
mutate(MEAS_CLASS = str_replace(MEAS_CLASS, '^M', '')) %>%
separate(COMMENT1, into = c('content_domain', 'cognitive_domain'), sep = '\\\\') %>%
mutate(cognitive_domain = str_extract(cognitive_domain, '\\w+')) %>%
mutate(question_type = sapply(MEAS_CLASS, function(x){
if(str_detect(x, '\\d')){
'Multiple Choice'
#there are so few derived questions that it messes with the models. They're essentially free responses anyway
#} else if (str_detect(x, 'DPC_D')) {
#  'Derived'
} else if (str_detect(x, 'SA|DPC_D')){
'Free Response'
} else {
'Other'
}
}))
detach(package:foreign)
detach(package:haven)
clean_math <- function(df, cdbook){
df %>%
#^M grabs all the math questions
#^BSM grabs all the benchmark scores
select_(.dots = names(.)[str_detect(names(.), '^M|IDSTUD|IDBOOK|IDSCHOOL|ITSEX|^BSM')]) %>%
gather_('question', 'answer', names(.)[str_detect(names(.), '^M')]) %>%
#about 30 students who responded NA to everything will disappear
#by getting rid of these students I end up having the same number of students per question as the almanac
filter(!is.na(answer)) %>%
mutate(benchmark_math_avg = (BSMMAT01 + BSMMAT02 + BSMMAT03 + BSMMAT04 + BSMMAT05)/5) %>%
mutate(benchmark_math_avg_value = lapply(benchmark_math_avg, function(x){
if(x >= 625){
'Advanced International'
} else if (x > 550) {
'High International'
} else if (x > 475) {
'Intermediate International'
} else if (x > 400) {
'Low International'
} else {
'Below Low International'
}
}) %>%
unlist()) %>%
group_by(IDBOOK) %>%
nest() %>%
mutate(
students_per_book = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
group_by(IDSTUD) %>%
count() %>%
nrow()
}) %>%
unlist()) %>%
mutate(
students_per_book_female = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
group_by(IDSTUD, ITSEX) %>%
count() %>%
filter(ITSEX == 1) %>%
nrow()
}) %>%
unlist()) %>%
mutate(
students_per_book_male = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
group_by(IDSTUD, ITSEX) %>%
count() %>%
filter(ITSEX == 2) %>%
nrow()
}) %>%
unlist()) %>%
unnest() %>%
left_join(cdbook, by = c('question' = 'FIELD_NAME')) %>%
#for open ended questions answers in the 20s are all correct however, those in the 10s can either be partially correct or fully correct
#until I can figure out how to parse the two, I will mark them all as correct
#for multiple choice the correct answer is stored in the 'MEAS_CLASs' variable
mutate(
student_gave_correct_answer = lapply(seq_along(.$MEAS_CLASS), function(i){
if(.$MEAS_CLASS[i] %in% 1:4){
.$MEAS_CLASS[i] == .$answer[i]
} else {
str_detect(.$answer[i], '^[12]')
}}) %>%
unlist()) %>%
#maybe I can figure out the open ended problems with the correct answers derived from $FIELD_LABL
mutate(
correct_answer_derived_from_labl = FIELD_LABL %>%
str_extract( '\\(\\d\\)|\\(\\w\\)')
) %>%
mutate(
FIELD_LABL = FIELD_LABL %>%
str_replace(' \\(\\d\\)|\\(\\w\\)', '')
) %>%
group_by(question) %>%
nest() %>%
mutate(
students_per_question = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
group_by(IDBOOK, students_per_book) %>%
count() %>%
.$students_per_book %>%
sum()
}) %>%
unlist()) %>%
mutate(
students_per_question_female = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
group_by(IDBOOK, students_per_book_female) %>%
count() %>%
.$students_per_book_female %>%
sum()
}) %>%
unlist()) %>%
mutate(
students_per_question_male = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
group_by(IDBOOK, students_per_book_male) %>%
count() %>%
.$students_per_book_male %>%
sum()
}) %>%
unlist()) %>%
#according to the math_itemalmanac I am off by about 5% fo each question
#but I actually think that the almanac is wrong
#at least when I compare the percent of each response for the multiple choice
#another posibility is that there was some kind of mix up with regards to the
#conversion of SAS/SPSS to R
mutate(
correct_ratio_per_question = lapply(seq_along(.$data), function(i){
tot_students  = .$students_per_question[i]
.$data[[i]] %>%
filter(student_gave_correct_answer) %>%
nrow()/tot_students
}) %>%
unlist()) %>%
mutate(
correct_ratio_per_question_female = lapply(seq_along(.$data), function(i){
tot_female = .$students_per_question_female[i]
.$data[[i]] %>%
filter(student_gave_correct_answer, ITSEX == 1) %>%
nrow()/ tot_female
}) %>%
unlist()) %>%
mutate(
correct_ratio_per_question_male = lapply(seq_along(.$data), function(i){
tot_male = .$students_per_question_male[i]
.$data[[i]] %>%
filter(student_gave_correct_answer, ITSEX == 2) %>%
nrow()/ tot_male
}) %>%
unlist()) %>%
mutate(
question_country_difficulty = sapply(correct_ratio_per_question, function(x){
if(x > .9){
'Really Easy'
} else if (x > .66){
'Easy'
} else if (x > .33){
'Normal'
} else if (x > .1){
'Difficult'
} else {
'Really Difficult'
}
})
) %>%
unnest()
}
chile_timss_math_11 <- clean_math(chile_achievement_11, achievement_codebook_11)
us_timss_math_11 <- clean_math(us_achievement_11, achievement_codebook_11)
rm(chile_achievement_11)
rm(us_achievement_11)
rm(achievement_codebook_11)
basic_graph_setup <- function(x){
x %>%
group_by(question, students_per_question, correct_ratio_per_question, correct_ratio_per_question_female,
correct_ratio_per_question_male, FIELD_LABL, content_domain, cognitive_domain) %>%
nest() %>%
arrange(desc(correct_ratio_per_question)) %>%
mutate(question_rank = 1:nrow(.)) %>%
mutate(diff_male_female = correct_ratio_per_question_male - correct_ratio_per_question_female) %>%
mutate(dominant_gender = sapply(.$diff_male_female, function(x){
if(x >0) {
'Male'
} else if(x<0){
'Female'
} else {
'Tie'
}
}))
}
chile_basic_graph_info <- basic_graph_setup(chile_timss_math_11)
us_basic_graph_info <- basic_graph_setup(us_timss_math_11)
chile_network <- chile_basic_graph_info %>%
select(question, question_rank, correct_ratio_per_question) %>%
mutate(id = str_c('chl_', question)) %>%
mutate(country = 'Chile')
us_network <- us_basic_graph_info %>%
select(question, question_rank, correct_ratio_per_question) %>%
mutate(id = str_c('usa_', question)) %>%
mutate(country = 'USA')
chile_basic_graph_info %>%  names()
chile_basic_graph_info$data[[1]]$names
chile_basic_graph_info$data[[1]] %>% names*
chile_basic_graph_info$data[[1]] %>% names()
basic_graph_setup <- function(x){
x %>%
group_by(question, students_per_question, correct_ratio_per_question, correct_ratio_per_question_female,
correct_ratio_per_question_male, FIELD_LABL, content_domain, cognitive_domain, question_type) %>%
nest() %>%
arrange(desc(correct_ratio_per_question)) %>%
mutate(question_rank = 1:nrow(.)) %>%
mutate(diff_male_female = correct_ratio_per_question_male - correct_ratio_per_question_female) %>%
mutate(dominant_gender = sapply(.$diff_male_female, function(x){
if(x >0) {
'Male'
} else if(x<0){
'Female'
} else {
'Tie'
}
}))
}
chile_basic_graph_info <- basic_graph_setup(chile_timss_math_11)
us_basic_graph_info <- basic_graph_setup(us_timss_math_11)
chile_network <- chile_basic_graph_info %>%
select(-data) %>%
mutate(id = str_c('chl_', question)) %>%
mutate(country = 'Chile')
us_network <- us_basic_graph_info %>%
select(-data) %>%
mutate(id = str_c('usa_', question)) %>%
mutate(country = 'USA')
chile_us_nodes <- rbind(chile_network, us_network) %>%
arrange(country, question_rank)
chile_us_links <- chile_us_nodes %>%
filter(country == 'Chile') %>%
mutate(to = str_replace_all(id, 'chl', 'usa')) %>%
rename(from = id) %>%
select(from, to)
ggplot(chile_us_nodes, aes(question_rank, country, color = correct_ratio_per_question)) +
geom_point(size = 2) +
scale_color_distiller(palette = "RdYlBu") +
geom_line(aes(group = as.factor(question)), color = 'grey80')
chile_us_nodes
chile_us_links
chile_us_links_d3 <- chile_us_nodes %>%
group_by(question) %>%
nest()
chile_us_links_d3
chile_us_links_d3$data[[1]]
chile_us_links_d3 <- chile_us_nodes %>%
select(question, country, question_rank) %>%
group_by(question) %>%
nest()
chile_us_links_d3$data[[1]]
chile_us_links_d3
chile_us_links_d3 <- chile_us_nodes %>%
select(question, country, question_rank) %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(
x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.$question_rank[1]}) %>%
unlist()
) %>%
mutate(
x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.$question_rank[1]}) %>%
unlist()
) %>%
select(-data)
chile_us_links_d3 <- chile_us_nodes %>%
filter(question != 'M032331') %>%
select(question, country, question_rank) %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(
x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.$question_rank[1]}) %>%
unlist()
) %>%
mutate(
x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.$question_rank[1]}) %>%
unlist()
) %>%
select(-data)
chile_us_links_d3
chile_us_links_d3 <- chile_us_nodes %>%
filter(question != 'M032331') %>%
select(question, country, question_rank) %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(
x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.[1,2]}) %>%
unlist()
) %>%
mutate(
x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.[1,2]}) %>%
unlist()
) %>%
select(-data)
chile_us_links_d3
chile_us_nodes
timss_links_json <- jsonlite::toJSON(chile_us_links_d3)
timss_nodes_json <- jsonlite::toJSON(chile_us_nodes)
write(timss_links_json, 'timss_links.json')
write(timss_nodes_json, 'timss_nodes.json')
names(chile_us_nodes)
str_to_title('HITHERE')
str_to_title('HITHERE BUDDY')
chile_us_nodes <- rbind(chile_network, us_network) %>%
arrange(country, question_rank) %>%
mutate(question = str_to_title(question)) %>%
mutate(cognitive_domain = str_to_title(cognitive_domain)) %>%
mutate(content_domain = str_to_title(content_domain))
chile_us_links_d3 <- chile_us_nodes %>%
filter(question != 'M032331') %>%
select(question, country, question_rank) %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(
x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.[1,2]}) %>%
unlist()
) %>%
mutate(
x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.[1,2]}) %>%
unlist()
) %>%
select(-data)
chile_us_nodes
chile_us_nodes
chile_us_nodes %>% select(FIELD_LABL, content_domain, cognitive_domain)
chile_us_nodes <- rbind(chile_network, us_network) %>%
arrange(country, question_rank) %>%
mutate(FIELD_LABL = str_to_title(FIELD_LABL)) %>%
mutate(cognitive_domain = str_to_title(cognitive_domain)) %>%
mutate(content_domain = str_to_title(content_domain))
chile_us_links_d3 <- chile_us_nodes %>%
filter(question != 'M032331') %>%
select(question, country, question_rank) %>%
group_by(question) %>%
nest() %>%
mutate(y1 = 'Chile') %>%
mutate(y2 = 'USA') %>%
mutate(
x1 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'Chile') %>%
.[1,2]}) %>%
unlist()
) %>%
mutate(
x2 = lapply(seq_along(.$data), function(i){
.$data[[i]] %>%
filter(country == 'USA') %>%
.[1,2]}) %>%
unlist()
) %>%
select(-data)
timss_links_json <- jsonlite::toJSON(chile_us_links_d3)
timss_nodes_json <- jsonlite::toJSON(chile_us_nodes)
chile_us_nodes %>% select(FIELD_LABL, content_domain, cognitive_domain, question)
write(timss_links_json, 'timss_links.json')
write(timss_nodes_json, 'timss_nodes.json')
?write
require(foreign)
require(haven)
chile_achievement_11 <- read_sas('timss/sas_timss11/bsachlm5.sas7bdat')
write_tsv(chile_achievement_11,path = 'chile_achievemnt_2011.tsv')
setwd("~/timss_d3/R")
